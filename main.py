import time
import traceback

from gspread import api_key

from core import WbReview
from integrations.google_sheets import GoogleSheetsConfigManager
from integrations.wildberries_api import WBIntegration
from integrations.deepseek_api import AIResponseGenerator
from utils import NotificationManager
from utils.logger import AppLogger
from core.responder import ReviewResponder


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logger = AppLogger("MainApp")


    while True:
        notifier = NotificationManager(
            bot_token="8036852376:AAHgYOoYzvalPzwcIf5F0TYAkM-FjGRyGMg",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
            chat_id="5125197365"
        )
        logger.logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ö–æ–¥ –ø–æ —Ü–∏–∫–ª—É")
        try:
            config = GoogleSheetsConfigManager("1QZw7vZIZR6caHJwGu0zwdp5K8TSNNE_HBsGVXUMe8Ig",
                                               "complete-sector-358111-6507e2db8737.json")
            ai_client = AIResponseGenerator("sk-Hf5sYl71ZmRT9bjwLkQViQ")
            responder = ReviewResponder(ai_client, logger)

            settings = config.get_active_config()
            if not settings['ai_enabled']:
                logger.logger.info(f"[{settings['marketplace']}] –î–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã.")
                continue

            api_key = settings.get("api_key")
            if api_key is None:
                raise Exception(f"[{settings['marketplace']}] –ù–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ API.")#TODO —Å–¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –ê–ü–ò –∫–ª—é—á–∞
            wb_client = WBIntegration(api_key)

            logger.logger.warning(f"[{settings['marketplace']}] –ë—É–¥—É—Ç –æ—Ç–±–∏—Ä–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤—ã, –∏–º–µ—é—â–∏–µ state –≤—Ö–æ–¥—è—â–∏–µ –≤ {wb_client.state}")

            reviews = wb_client.get_new_reviews(settings['rating_threshold'])

            for raw_review in reviews:
                review = WbReview(**raw_review)
                response = responder.process_review(review, settings['prompt_template'])
                if response:
                    if wb_client.post_response(review['id'], response):
                        logger.logger.info(f"[{review.marketplace}] [{review.id}] –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                    else:
                        logger.logger.error(f"[{review.marketplace}] [{review.id}] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–∑—ã–≤.")


        except Exception as e:
            error_msg = f"Main loop error: {str(e)}\n\n{traceback.format_exc()}"
            logger.logger.error(error_msg)
            notifier.send_alert(f"üö® Critical Error\n{error_msg}", level="CRITICAL")
        finally:
            time.sleep(60)
if __name__ == '__main__':
    main()